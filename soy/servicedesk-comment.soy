{namespace ServiceDesk.Comment.Field}

/**
 * Comment field edit.
 * @param isExternalMode
 * @param isAgent
 * @param isRteEnabled
 * @param userName key of the currently authenticated user
 * @param issueKey
 * @param comment the comment that was previously here
 * @param errors errors that may be in the form
 * @param modifierKey errors that may be in the form
 * @param isBulkEdit are we in a bulk edit?
 * @param avatarUrl
 */
{template .commentFieldEdit}
    {if $isBulkEdit}
        <td class=" aui-field-wikiedit comment-input" id="comment_container">
            {call .commentFieldEditContent data="all"/}
        </td>
    {else}
        {call .commentFieldEditContent data="all"/}
    {/if}
{/template}

/**
 * Comment field edit for bulk edit.
 * @param isExternalMode
 * @param isAgent
 * @param isRteEnabled
 * @param userName key of the currently authenticated user
 * @param issueKey
 * @param isEdit
 * @param agentDisplayName
 * @param reporterDisplayName
 * @param errors errors that may be in the form
 * @param modifierKey
 * @param isBulkEdit are we in a bulk edit?
 * @param avatarUrl
 * @param isSecurityLevelAvailable
 * @param comment
 * @param? isRequired
 */
{template .commentFieldEditContent}
        <div class="field-group">
            {if not $isBulkEdit}
                <label for="comment">
                    {getText('sd.comment.field.name')}
                    {if $isRequired}
                        <span class="aui-icon icon-required"> {getText('sd.common.words.required')}</span>
                    {/if}
                </label>
            {/if}
            <sd-comment-field class="sd-comment-field {$isAgent ? 'js-cannedresponses-context': ''}" data-avatar-url="{$avatarUrl}" data-modifier-key="{$modifierKey}" data-is-edit="{$isEdit}" data-is-agent="{$isAgent}"
                data-is-external="{$isExternalMode}" data-issue-key="{$issueKey}" data-user-name="{$userName}" data-is-rte-enabled="{$isRteEnabled}"
                data-agent-display-name="{$agentDisplayName}" data-reporter-display-name="{$reporterDisplayName}" data-is-security-level-available="{$isSecurityLevelAvailable}"
                >
                    {if $isSecurityLevelAvailable}
                        {call .commentSecurityLevelPayload data="all" /}
                    {/if}
                    <div class="sd-comment-tab-container tabwrap tabs2">
                        {call .drawCommentTabs data="all"/}
                    </div>
                    <div class="sd-comment-message">
                        {call .drawCommentMessage data="all"/}
                    </div>
                    <div class="sd-comment-field-form-container">
                        {call .drawCommentForm data="all" /}
                    </div>
                    {if $errors and length($errors) > 0}
                        <div class="error">
                            {foreach $error in $errors}
                                <p>{$error}</p>
                            {/foreach}
                        </div>
                    {/if}
            </sd-comment-field>
        </div>
{/template}

/**
 * Render the comment page from the server
 * @param isAgent
 * @param isRteEnabled
 * @param userName key of the currently authenticated user
 * @param issueId
 * @param issueKey
 * @param modifierKey
 * @param avatarUrl
 * @param agentDisplayName
 * @param reporterDisplayName
 * @param isSecurityLevelAvailable
 * @param commentSecurityLevelPayload
 */
{template .commentIssuePageEdit}
    <sd-comment class="sd-comment-container  {$isAgent ? 'js-cannedresponses-context': ''}" data-avatar-url="{$avatarUrl}" data-modifier-key="{$modifierKey}"  data-is-agent="{$isAgent}"
        data-user-name="{$userName}" data-issue-id="{$issueId}" data-issue-key="{$issueKey}" data-is-rte-enabled="{$isRteEnabled}"
        data-agent-display-name="{$agentDisplayName}" data-reporter-display-name="{$reporterDisplayName}"
        data-is-security-level-available="{$isSecurityLevelAvailable}">
            {if $isSecurityLevelAvailable}
                {call .commentSecurityLevelPayload data="all" /}
            {/if}
            {call .drawCollapsedComment data="all"/}
    </sd-comment>
{/template}

/**
 * Draw the collapsed state of comments
 * @param avatarUrl avatarUrl
 */
{template .drawCollapsedComment}
    <div class="sd-comment-collapse">
        <img class="sd-comment-avatar" src="{$avatarUrl}">
        <form class="aui dont-default-focus">
            <textarea id="sd-comment-collapsed-textarea" class="textarea" placeholder="{getText('sd.comment.empty.placeholder')}"></textarea>
        </form>
    </div>
{/template}

/**
 * Draws the expanded mode of the comments
 * @param isExternalMode
 * @param isAgent
 * @param shouldUseButtons
 * @param isRteEnabled
 */
{template .commentExpanded}
    {if not $shouldUseButtons}
        <div class="sd-comment-tab-container tabwrap tabs2">
            {call .drawCommentTabs data="all"/}
        </div>
    {/if}
    <div class="sd-add-comment-container">
        {if not $shouldUseButtons}
            <div class="sd-comment-message">
                {call .drawCommentMessage data="all"/}
            </div>
        {/if}
        <form class="aui js-comment-form">
            {let $buttonsContent}
                {call .drawCommentButtons data="all" /}
            {/let}

            {call .drawCommentForm data="all"}
                {param extraCommentContent: $isRteEnabled? $buttonsContent : ''/}
            {/call}
            {if not $isRteEnabled}
                {$buttonsContent|noAutoescape}
            {/if}
        </form>
    </div>
{/template}

/**
 * Draws the tabs for the comments
 * @param isExternalMode
 * @param isAgent
 */
{template .drawCommentTabs}
    <div class="aui-tabs horizontal-tabs">
        <ul id="sd-comment-tabs" class="tabs-menu">
            <li class="js-sd-external-comment menu-item {if $isExternalMode}active-tab{/if} {if not $isAgent}disabled{/if}">
                <a href='#'>{getText('sd.comment.tab.external')}</a>
            </li>
            <li class="js-sd-internal-comment menu-item {if not $isExternalMode}active-tab{/if}">
                <a href='#'>{getText('sd.comment.tab.internal')}</a>
            </li>
        </ul>
    </div>
{/template}

/**
 * Writes down the description of the current comment mode
 * @param isExternalMode
 */
{template .drawCommentMessage}
    {if $isExternalMode}
        {getText('sd.comment.tab.external.message')}
    {else}
        <span class="aui-icon aui-icon-small aui-iconfont-locked">Locked</span>
        {getText('sd.comment.tab.internal.message')}
    {/if}
    <input name="commentProperty" type="hidden" value="{literal}[{key: &quot;sd.public.comment&quot;, value: {internal: &quot;{/literal}{not $isExternalMode}{literal}&quot;}}]{/literal}"/>
{/template}

/**
 * Draw the contents of the comment form
 * @param issueKey key of issue comment belongs to
 * @param comment the comment that was previously here
 * @param isPreview the comment that was previously here
 * @param commentHtml that should be generated by a server-side wiki-markup generator
 * @param isSecurityLevelAvailable
 * @param isRteEnabled
 * @param? isRequired
 * @param? extraCommentContent extra content at the end of comments bar. This value is not autoescaped
 */
{template .drawCommentForm}
    <div class="sd-comment-form-container wiki-edit-content">
        {if $isPreview}
            <div class="sd-comment-preview">{$commentHtml|noAutoescape}</div>
            <textarea id="comment" name="comment" class="textarea hidden">
        {else}
            //The "wiki-textfield" class tells JIRA to decorate us with a wiki-editor toolbar above :)
            <textarea
                    id="comment"
                    name="comment"
                    class="textarea wiki-textfield sd-comment-textarea mentionable"
                    data-issuekey="{$issueKey}"
                    {if $isRequired}required{/if}
            >
        {/if}
            {$comment}
        </textarea>
        {if $isRteEnabled}
            <rich-editor></rich-editor>
        {/if}

        <div class="field-tools {if $isRteEnabled}sd-rte-bar{/if}">
            {if $isSecurityLevelAvailable}
                {call .commentSecurityLevelSelector data="all" /}
            {/if}
            {if not $isRteEnabled}
            <span class="sd-preview-container">
                <a class="js-sd-preview" href="#" id="sd-comment-preview_link" title="{getText('sd.comment.preview')}">
                    {if $isPreview}
                        {getText('sd.comment.preview.exit')}
                    {else}
                        {getText('sd.comment.preview')}
                    {/if}
                </a>
            </span>
            <span>
                <a class="help-lnk" id="viewHelp" href="{contextPath()}/secure/WikiRendererHelpAction.jspa?section=texteffects" title="{getText('renderer.notation-help')}" data-helplink="local">
                    {getText('sd.admin.create.queue.jql.help')}
                </a>
            </span>
            {/if}

            {if $extraCommentContent}
                {$extraCommentContent|noAutoescape}
            {/if}
        </div>
    </div>
{/template}

/**
 * Renders buttons under comments (submission)
 * @param shouldUseButtons
 */
{template .drawCommentButtons}
    <div class="sd-comment-buttons">
        {if $shouldUseButtons}
            {call .drawCommentSubmitButtons data="all" /}
        {else}
            {call .drawCommentSubmitButton data="all" /}
        {/if}
    </div>
{/template}

/**
 * Draws the submit button that is relevant to this form
 * @param modifierKey
 * @param isExternalMode
 */
{template .drawCommentSubmitButton}
    {call ServiceDesk.Templates.Shared.Form.submitButtons}
        {param submitExtraClasses}
            {if $isExternalMode}aui-button-primary sd-external-submit{else}sd-internal-submit{/if}
        {/param}
        {param submitButtonLabel}
            {if $isExternalMode}{getText('sd.comment.tab.button.external')}{else}{getText('sd.comment.tab.button.internal')}{/if}
        {/param}
        {param modifierKey: $modifierKey /}
    {/call}
{/template}


/**
 * Draws the submit buttons that are relevant to this user
 * @param modifierKey
 * @param isAgent
 */
{template .drawCommentSubmitButtons}
    {if $isAgent}
        {call ServiceDesk.Templates.Shared.Form.submitButton}
            {param extraClasses}
                aui-button-primary sd-external-submit
            {/param}
            {param label: getText('sd.issue.view.comment.button.public') /}
            {param modifierKey: $modifierKey /}
            {param accessKey: 'e' /}
        {/call}
    {/if}
    {call ServiceDesk.Templates.Shared.Form.submitButtons}
        {param submitExtraClasses}
            sd-internal-submit
        {/param}
        {param submitButtonLabel: getText('sd.issue.view.comment.button.private') /}
        {param modifierKey: $modifierKey /}
        {param alignment: 'right' /}
    {/call}
{/template}


/**
 * Draws the submit button that is relevant to this form
 * @param reporter
 * @param agent
 */
{template .prepopulatedComment}
    {if $reporter}
        {getText('sd.comment.prepopulated.default.greeting', $reporter)}{\n}
    {else}
        {getText('sd.comment.prepopulated.default.anonymous.greeting')}{\n}
    {/if}
    {\n}
    {\n}
    {\n}
    – {$agent}
{/template}

/**
 * Comment security level selector
 * @param groupSecurityLevels
 * @param roleSecurityLevels
 * @param selectedCommentSecurityLevel
 */
{template .commentSecurityLevelSelector}
    {let $isRolePresent: $roleSecurityLevels and length($roleSecurityLevels) > 0 /}
    {let $isGroupPresent: $groupSecurityLevels and length($groupSecurityLevels) > 0 /}

    {let $safeSelectedLevelName}
        {foreach $roleLevel in $roleSecurityLevels}
            {if $selectedCommentSecurityLevel == ('role:' + $roleLevel.id)}
                {$roleLevel.name}
            {/if}
        {/foreach}
        {foreach $groupLevel in $groupSecurityLevels}
            {if $selectedCommentSecurityLevel == ('group:' + $groupLevel)}
                {$groupLevel}
            {/if}
        {/foreach}
    {/let}
    {let $selectedLevelTextHTML: $safeSelectedLevelName ? getText('sd.comment.security.level.restricted.to', '<span class="redText">' + $safeSelectedLevelName + '</span>') : getText('sd.comment.security.level.viewable.by.all') /}

    <div class="sd-comment-security-level security-level">
        <fieldset class="hidden parameters">
            <input type="hidden" title="securityLevelViewableByAll" value="{getText('sd.comment.security.level.viewable.by.all')}">
            <input type="hidden" title="securityLevelViewableRestrictedTo" value="{getText('sd.comment.security.level.restricted.to')}">
        </fieldset>
        <a class="drop" href="#">
            <span class="security-level-drop-icon aui-icon aui-icon-small{if $safeSelectedLevelName} aui-iconfont-locked{else} aui-iconfont-unlocked{/if}">
                {getText('sd.comment.security.level.explanation', $selectedLevelTextHTML)|noAutoescape}
            </span>
            {sp}
            <span class="icon drop-menu"></span>
        </a>
        <select name="commentLevel" id="commentLevel" class="js-comment-level">
            <option value="">{getText('sd.comment.security.level.allusers')}</option>
            {if $isRolePresent}
                <optgroup label="{getText('sd.common.words.project.roles')}">
                    {foreach $roleLevel in $roleSecurityLevels}
                        <option value="role:{$roleLevel.id}"{if $selectedCommentSecurityLevel == ('role:' + $roleLevel.id)} selected="selected"{/if}>{$roleLevel.name}</option>
                    {/foreach}
                </optgroup>
            {/if}
            {if $isGroupPresent}
                <optgroup label="{getText('sd.common.words.groups')}">
                    {foreach $groupLevel in $groupSecurityLevels}
                        <option value="group:{$groupLevel}" {if $selectedCommentSecurityLevel == ('group:' + $groupLevel)}selected="selected"{/if}>{$groupLevel}</option>
                    {/foreach}
                </optgroup>
            {/if}
        </select>
        {sp}
        <span class="current-level">{$selectedLevelTextHTML|noAutoescape}</span>
    </div>
{/template}

/**
 * Comment security levels json payload
 * @param commentSecurityLevelPayload
 */
{template .commentSecurityLevelPayload}
    <div class="js-comment-security-jsonpayload hidden">
        {$commentSecurityLevelPayload}
    </div>
{/template}

/**
 * @param errorMessage
 */
{template .errorContent}
<h2>{getText('common.forms.ajax.error.dialog.heading')}</h2>
<div class="dialog-error">
    <p>{$errorMessage}</p>
    <p>{getText('common.forms.ajax.error.dialog')}</p>
</div>
{/template}
